{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Leapt Core bundle is a bundle used to help with some repetitive tasks, including (but not limited to):</p> <ul> <li>Data lists with search</li> <li>File and image uploads</li> <li>Form types</li> <li>Honeypot for forms</li> <li>Navigation helper</li> <li>Paginator</li> <li>RSS feed generation</li> <li>SEO-related tasks (sitemaps, etc)</li> <li>Twig extensions</li> <li>Utilities</li> <li>Validators: PasswordStrength, Recaptcha, Slug</li> </ul> <p>If you find a bug or want to add a functionality, please create an issue or a pull request on Github!</p>"},{"location":"#examples","title":"Examples","text":"Grid layout example Tiled layout example Paginator example Form types example"},{"location":"#installation","title":"Installation","text":"<p>This bundle requires PHP 8.2+.</p> <p>As the bundle is compatible with Symfony 6.4/7.0+ and Symfony Flex, the only thing you have to do is requiring the package with composer:</p> <pre><code>composer require leapt/core-bundle\n</code></pre> <p>The bundle will automatically be registered in the <code>bundles.php</code> file.</p>"},{"location":"#license","title":"License","text":"<p>leapt/core-bundle is released under the MIT License. See the bundled LICENSE file for details.</p>"},{"location":"#history","title":"History","text":"<p>This bundle is a fork of the Snowcap Core bundle.</p>"},{"location":"configuration_reference/","title":"Configuration Reference","text":"<pre><code># config/packages/leapt_core.yaml\nleapt_core:\n    upload_dir: '%kernel.project_dir%/public'\n    google_analytics:\n        tracking_id: null\n        domain_name: auto\n        allow_linker: false\n        debug: false\n    google_tags_manager:\n        id: null\n    facebook:\n        app_id: null\n    paginator:\n        template: '@LeaptCore/Paginator/paginator_default_layout.html.twig'\n    honeypot:\n        enabled_globally: false\n        field_name: repeat_email\n        css_class: d-none\n    recaptcha:\n        public_key:  'your_public_key'\n        private_key: 'your_private_key'\n        enabled: true\n        verify_host: false\n        locale_key: '%kernel.default_locale'\n        locale_from_request: false\n        ajax: false\n        api_host: www.google.com\n        hide_badge: false\n        score_threshold: 0.5\n        http_proxy:\n            host: null\n            port: null\n            auth: null\n</code></pre>"},{"location":"data_lists/","title":"Data lists","text":"<p>The Datalist component will help you create powerful data lists and lets you:</p> <ul> <li>Specify a data source (bundle provides datasource handlers for arrays and Doctrine ORM)</li> <li>Define all the fields (data) you want</li> <li>Create filters to narrow the search</li> <li>Paginate automatically (using the Paginator defined earlier)</li> </ul> Grid layout example Tiled layout example"},{"location":"data_lists/#create-your-first-data-list","title":"Create your first Data list","text":"<p>The following example creates a paginated list of News (10 per page), ordered by descending publication date.</p> <p>It will display a search filter, two fields (title and publicationDate), and a link to update the news.</p> Example <pre><code>namespace App\\Controller;\n\nuse App\\Entity\\News;\nuse App\\Repository\\NewsRepository;\nuse Leapt\\CoreBundle\\Datalist\\Action\\Type\\SimpleActionType;\nuse Leapt\\CoreBundle\\Datalist\\DatalistFactory;\nuse Leapt\\CoreBundle\\Datalist\\Datasource\\DoctrineORMDatasource;\nuse Leapt\\CoreBundle\\Datalist\\Field\\Type\\DateTimeFieldType;\nuse Leapt\\CoreBundle\\Datalist\\Field\\Type\\TextFieldType;\nuse Leapt\\CoreBundle\\Datalist\\Filter\\Type\\SearchFilterType;\nuse Leapt\\CoreBundle\\Datalist\\Type\\DatalistType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class NewsController extends AbstractController\n{\n    public function __construct(\n        private DatalistFactory $datalistFactory,\n        private NewsRepository $newsRepository,\n    ) {\n    }\n\n    public function index(Request $request): Response\n    {\n        $queryBuilder = $this-&gt;newsRepository-&gt;createQueryBuilder('e')\n            -&gt;orderBy('e.publicationDate', 'DESC');\n\n        $datalist = $this-&gt;datalistFactory-&gt;createBuilder(DatalistType::class, [\n                'limit_per_page' =&gt; 10,\n                'data_class'     =&gt; News::class,\n            ])\n            -&gt;addField('title', TextFieldType::class, [\n                'label' =&gt; 'news.title',\n            ])\n            -&gt;addField('publicationDate', DateTimeFieldType::class, [\n                'label'  =&gt; 'news.publication_date',\n                'format' =&gt; 'Y/m/d',\n            ])\n            -&gt;addFilter('title', SearchFilterType::class, [\n                'label'         =&gt; 'news.title',\n                'search_fields' =&gt; ['e.title'],\n            ])\n            -&gt;addAction('update', SimpleActionType::class, [\n                'route'  =&gt; 'app_news_update',\n                'label'  =&gt; 'content.index.update',\n                'params' =&gt; ['id' =&gt; 'id'],\n            ])\n            -&gt;getDatalist();\n\n        $datalist-&gt;setRoute($request-&gt;attributes-&gt;get('_route'))\n            -&gt;setRouteParams($request-&gt;query-&gt;all());\n        $datasource = new DoctrineORMDatasource($queryBuilder);\n        $datalist-&gt;setDatasource($datasource);\n        $datalist-&gt;bind($request);\n\n        return $this-&gt;render('news/index.html.twig', [\n            'datalist' =&gt; $datalist,\n        ]);\n    }\n}\n</code></pre> Tip <p>You can also lighten your controller by creating a custom Datalist class.</p>"},{"location":"data_lists/#render-the-data-list","title":"Render the Data list","text":"<pre><code>{% if datalist is empty %}\n    No news available.\n{% else %}\n    {{ datalist_widget(datalist) }}\n{% endif %}\n</code></pre> <p>The data list is built using the <code>@LeaptCore/Datalist/datalist_grid_layout.html.twig</code> by default, but you can of course create your own. Here are the templates provided by the bundle:</p> <ul> <li><code>@LeaptCore/Datalist/datalist_grid_layout.html.twig</code> (default)</li> <li><code>@LeaptCore/Datalist/datalist_tiled_layout.html.twig</code></li> <li><code>@LeaptCore/Datalist/datalist_bootstrap3_grid_layout.html.twig</code></li> <li><code>@LeaptCore/Datalist/datalist_bootstrap3_tiled_layout.html.twig</code></li> <li><code>@LeaptCore/Datalist/datalist_bootstrap4_grid_layout.html.twig</code></li> <li><code>@LeaptCore/Datalist/datalist_bootstrap4_tiled_layout.html.twig</code></li> <li><code>@LeaptCore/Datalist/datalist_bootstrap5_grid_layout.html.twig</code></li> <li><code>@LeaptCore/Datalist/datalist_bootstrap5_tiled_layout.html.twig</code></li> </ul> <p>And like the Paginator component, you can override it using a Twig tag:</p> <pre><code>{% datalist_theme datalist '@LeaptCore/Datalist/datalist_bootstrap5_grid_layout.html.twig' %}\n</code></pre> <p>Don't hesitate to create your own to adapt it to your layout/styles.</p>"},{"location":"data_lists/#available-field-types","title":"Available Field types","text":"<p>Here are the Field Types provided by the bundle. Feel free to check the classes to know the available options.</p> <p>You can also create your own.</p> <ul> <li>BooleanFieldType</li> <li>DateTimeFieldType</li> <li>HeadingFieldType</li> <li>ImageFieldType</li> <li>LabelFieldType</li> <li>TextFieldType</li> <li>UrlFieldType</li> </ul>"},{"location":"data_lists/#available-filter-types","title":"Available Filter types","text":"<p>Here are the Filter Types provided by the bundle. Feel free to check the classes to know the available options.</p> <p>You can also create your own.</p> <ul> <li>BooleanFilterType</li> <li>ChoiceFilterType</li> <li>EntityFilterType</li> <li>EnumFilterType</li> <li>IsNullFilterType</li> <li>SearchFilterType</li> </ul>"},{"location":"data_lists/#available-action-types","title":"Available Action types","text":"<p>There is currently one Action Type provided by the bundle: SimpleActionType. Feel free to check the class to know the available options.</p> <p>You can also create your own.</p>"},{"location":"file_uploads/","title":"File Uploads","text":"<p>The <code>File</code> attribute is available to automatically handle file uploads for your entities.</p> <p>Usage</p> EntityForm <pre><code>use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore;\n\nclass News\n{\n    #[ORM\\Column(type: 'string')]\n    private ?string $name = null;\n\n    #[ORM\\Column(type: 'string')]\n    private ?string $image = null;\n\n    #[LeaptCore\\File(path: 'uploads/news', mappedBy: 'image', nameCallback: 'name')]\n    private ?UploadedFile $file = null;\n}\n</code></pre> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\FileType;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder\n        -&gt;add('file', FileType::class, [\n            'label'        =&gt; 'press_radio_spot.field.file',\n            'file_path'    =&gt; 'image', // Required, see Options\n            'allow_delete' =&gt; true,\n            'file_label'   =&gt; 'file_type.label',\n        ])\n    ;\n}\n</code></pre> <p>Options</p> <p>Mandatory options:</p> <ul> <li><code>path</code>, <code>pathCallback</code> or <code>flysystemConfig</code></li> <li><code>mappedBy</code></li> </ul> Name Description path Path where to store files. pathCallback Callback that returns the path where to store files. mappedBy Class property that will be used to store the file path. nameCallback Callback that returns a string that will be used to generate the filename. flysystemConfig Name of the Flysystem storage to use. <p>So there are two options to handle file uploads:</p> <ul> <li>either specify the <code>path</code> or <code>pathCallback</code> option to store files locally</li> <li>or specify the <code>flysystemConfig</code> option, so you can store files anywhere using Flysystem.</li> </ul> <p>Note</p> <p>To retrieve configured Flysystem storages, the bundle checks for any storage configured using league/flysystem-bundle.</p>"},{"location":"file_uploads/#flysystem-examples","title":"Flysystem examples","text":"EntityFormconfig/packages/flysystem.yamlconfig/services.yaml <pre><code>use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore;\n\nclass News\n{\n    #[ORM\\Column(type: 'string')]\n    private ?string $image = null;\n\n    #[LeaptCore\\File(mappedBy: 'image', flysystemConfig: 'local')]\n    private ?UploadedFile $file = null;\n}\n</code></pre> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\FileType;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder\n        -&gt;add('file', FileType::class, [\n            'label'        =&gt; 'press_radio_spot.field.file',\n            'file_path'    =&gt; 'image', // Required, see Options\n            'allow_delete' =&gt; true,\n            'file_label'   =&gt; 'file_type.label',\n        ])\n    ;\n}\n</code></pre> <pre><code>flysystem:\n    storages:\n        # Example using local storage\n        local:\n            adapter: 'local'\n            options:\n                directory: '%kernel.project_dir%/public'\n        # Example using S3 storage\n        s3:\n            adapter: 'aws'\n            # visibility: public # Make the uploaded file publicly accessible in S3\n            options:\n                client: 'aws_client_service'\n                bucket: '%env(AWS_BUCKET)%'\n        # Example using Async S3 storage\n        s3async:\n            adapter: 'asyncaws'\n            options:\n                client: 'aws_sync_client_service'\n                bucket: '%env(AWS_BUCKET)%'\n</code></pre> <pre><code># If you use S3 adapters, you must configure a service that will be used by Flysystem\nservices:\n    # S3 config\n    aws_client_service:\n        class: Aws\\S3\\S3Client\n        arguments:\n            -\n                region: \"%env(AWS_REGION)%\"\n                version: latest\n                credentials:\n                    key: \"%env(AWS_KEY)%\"\n                    secret: \"%env(AWS_SECRET)%\"\n\n    # Async S3 config    \n    aws_sync_client_service:\n        class: AsyncAws\\S3\\S3Client\n        arguments:\n            -\n                accessKeyId: \"%env(AWS_KEY)%\"\n                accessKeySecret: \"%env(AWS_SECRET)%\"\n                region: \"%env(AWS_REGION)%\"\n</code></pre>"},{"location":"form_types/","title":"Form Types","text":"<p> Example of included form types</p>"},{"location":"form_types/#available-form-layouts","title":"Available form layouts","text":"<p>Since version 4.1.0 of the bundle, there are several form layouts available for the form types provided by the bundle:</p> <ul> <li><code>@LeaptCore/Form/form_layout.html.twig</code></li> <li><code>@LeaptCore/Form/bootstrap_3_layout.html.twig</code></li> <li><code>@LeaptCore/Form/bootstrap_4_layout.html.twig</code></li> <li><code>@LeaptCore/Form/bootstrap_5_layout.html.twig</code></li> </ul> <p>If you don't know how to apply a form theme to your forms, please check Symfony docs about it.</p>"},{"location":"form_types/#file-type","title":"File type","text":"<p>Usage</p> FormModel / Entity <pre><code>use Leapt\\CoreBundle\\Form\\Type\\FileType;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder-&gt;add('file', FileType::class, [\n        'label'        =&gt; 'press_radio_spot.field.file',\n        'file_path'    =&gt; 'path', // Required, see Options\n        'allow_delete' =&gt; true,\n        'file_label'   =&gt; 'file_type.label',\n    ]);\n}\n</code></pre> <pre><code>use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore;\n\nclass News\n{\n    #[ORM\\Column(type: 'string')]\n    private ?string $image = null;\n\n    #[LeaptCore\\File(path: 'uploads/news', mappedBy: 'image')]\n    private ?UploadedFile $file = null;\n}\n</code></pre> Options Name Description Default value file_path (required) Property of the object that stores the file path. Used to display a download link. Can be a string, or a callback to generate the link. The callback gets the entire object as an argument. delete_label Text to display next to the delete checkbox. Delete download_label Text to display in the download link. Download allow_delete Display a checkbox that allows to remove the current file. true allow_download Display a link to download the file. true file_type_class The underlying type that will be used to upload the file. <code>Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType</code> file_attr Attributes to pass to the FileType. <code>[]</code> <p>Info</p> <ul> <li>Added in v4.5.0: a FileField is available to use with EasyAdmin bundle. Requires EasyAdmin bundle v4.3.3+.</li> <li>Added in v4.11.0: <code>file_type_class</code> and <code>file_attr</code> options.</li> </ul> <p>See also File uploads.</p>"},{"location":"form_types/#image-type","title":"Image type","text":"<p>To be updated soon. See also File uploads.</p> <p>Info</p> <p>Added in v4.5.0: an ImageField is available to use with EasyAdmin bundle. Requires EasyAdmin bundle v4.3.3+.</p>"},{"location":"form_types/#recaptcha-type","title":"Recaptcha type","text":"<p>This form type is based on the EWZRecaptchaBundle, and allows you  to generate a Recaptcha V2 in your form, and validate it.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\RecaptchaType;\nuse Leapt\\CoreBundle\\Validator\\Constraints as LeaptCore;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nfinal class ContactType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder-&gt;add('recaptcha', RecaptchaType::class, [\n            'label' =&gt; false,\n            'constraints' =&gt; new LeaptCore\\Recaptcha(), // You can also set the constraint in your model\n        ]);\n    }\n}\n</code></pre> <p>Layout</p> <p>Use/extend the <code>@LeaptCore/Form/form_core_layout.html.twig</code>, or add it to your Twig's <code>form_themes</code> configuration,  so the field is rendered properly.</p> <p>Configuration</p> <pre><code># config/packages/leapt_core.yaml\nleapt_core:\n    recaptcha:\n        public_key:  'your_public_key'\n        private_key: 'your_private_key'\n        enabled: true # true by default, but you can set it to false for your tests\n</code></pre>"},{"location":"form_types/#recaptchav3-type","title":"RecaptchaV3 type","text":"<p>This form type is based on the EWZRecaptchaBundle, and allows you  to generate a Recaptcha V3 in your form, and validate it.</p> <p>It requires you to have the <code>google/recaptcha</code> package installed in your application. If it is not installed, a clear error message should be displayed in debug mode when validating.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\RecaptchaV3Type;\nuse Leapt\\CoreBundle\\Validator\\Constraints as LeaptCore;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nfinal class ContactType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder-&gt;add('recaptcha', RecaptchaV3Type::class, [\n            'label' =&gt; false,\n            'constraints' =&gt; new LeaptCore\\RecaptchaV3(), // You can also set the constraint in your model\n        ]);\n    }\n}\n</code></pre> <p>Layout</p> <p>Use/extend the <code>@LeaptCore/Form/form_core_layout.html.twig</code>, or add it to your Twig's <code>form_themes</code> configuration,  so the field is rendered properly.</p> <p>Configuration</p> <pre><code># config/packages/leapt_core.yaml\nleapt_core:\n    recaptcha:\n        public_key:  'your_public_key'\n        private_key: 'your_private_key'\n        enabled: true # true by default, but you can set it to false for your tests\n        hide_badge: true # false by default\n</code></pre>"},{"location":"form_types/#sound-type","title":"Sound type","text":"<p>Provides a text field where the user enters a code matching an item available on a Sound platform. When the value is filled when rendering the form, it will display a player.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\SoundType;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder-&gt;add('sound', SoundType::class, [\n        'provider' =&gt; SoundType::PROVIDER_SOUNDCLOUD,\n    ]);\n}\n</code></pre> Options Name Description Default value provider (required) Which provider should be used to render the player. Values available as constants on SoundType (currently available: \"soundcloud\") player_width Width of the player to display, can be either an int or a string. 560 player_height Height of the player to display, can be either an int or a string. 300"},{"location":"form_types/#video-type","title":"Video type","text":"<p>Provides a text field where the user enters a code matching an item available on a Video platform. When the value is filled when rendering the form, it will display a player.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Form\\Type\\VideoType;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder-&gt;add('video', VideoType::class, [\n        'provider' =&gt; VideoType::PROVIDER_YOUTUBE,\n    ]);\n}\n</code></pre> Options Name Description Default value provider (required) Which provider should be used to render the player. Values available as constants on VideoType (currently available: \"youtube\", \"tudou\", \"vimeo\", \"dailymotion\") player_width Width of the player to display, can be either an int or a string. 560 player_height Height of the player to display, can be either an int or a string. 300"},{"location":"honeypot/","title":"Honeypot","text":"<p>You can automatically add a honeypot form field to protect your forms from bots.</p> <p>It can be configured either globally (see Configuration Reference) or set on each form type individually.</p> <p>Info</p> <p>The Honeypot form extension was introduced in leapt/core-bundle 4.7.</p>"},{"location":"honeypot/#enable-it-globally","title":"Enable it globally","text":"<p>There are three options available to set in your configuration:</p> <pre><code>leapt_core:\n    honeypot:\n        enabled_globally: false\n        input_name: repeat_email\n        css_class: d-none\n</code></pre> Name Type Default value Description enabled_globally bool false Enable the honeypot globally for all forms. input_name string repeat_email The field name that will be used on render. css_class string d-none The CSS class that will be used to hide the input for regular users."},{"location":"honeypot/#usage-on-specific-form","title":"Usage on specific form","text":"<p>The options you can define on your form type are likely the same that you can define in your global configuration.</p> <p>Default values are the ones taken from your configuration.</p> Name Type Description honeypot_enabled bool Enable the honeypot globally for all forms. honeypot_input_name string The field name that will be used on render. honeypot_css_class string The CSS class that will be used to hide the input for regular users. <p>Usage</p> <pre><code>final class YourFormType extends AbstractType\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver-&gt;setDefaults([\n            'honeypot_enabled'    =&gt; true,\n            'honeypot_input_name' =&gt; 'please_repeat_email',\n            'honeypot_css_class'  =&gt; 'hide',\n        ]);\n    }\n}\n</code></pre> <p>Warning</p> <p>Related form errors bubble up to the main form, so if you want to display the related errors, don't forget to do it:</p> <pre><code>{{ form_start(form) }}\n    {% if form.vars.errors|length &gt; 0 %}\n        &lt;div class=\"alert alert-danger mt-3\"&gt;\n            {% for error in form.vars.errors %}\n                {{ error.message }}\n            {% endfor %}\n        &lt;/div&gt;\n    {% endif %}\n    ...\n{{ form_end(form) }}\n</code></pre>"},{"location":"navigation_helper/","title":"Navigation Helper","text":"<p>The Navigation helper is a set of tools to figure out which page you are on.</p> <p>Note that, if the documentation only covers the Twig Extension way (which covers the most common needs),  you can also inject the <code>Leapt\\CoreBundle\\Navigation\\NavigationRegistry</code> service into your service/controller  to perform the same.</p>"},{"location":"navigation_helper/#active-paths","title":"Active paths","text":"<p>Allows checking if the specified path is the current one.</p> <p>The Twig Extension provides 4 functions:</p> <ul> <li><code>set_active_paths</code>: set an array of active paths</li> <li><code>get_active_paths</code>: get the array of active paths</li> <li><code>add_active_path</code>: add one active path (as a string)</li> <li><code>is_active_path</code>: check if the provided path is the current one, returns a boolean. Note that this function will check  if the specified path is either in the provided active paths, or the current request URI.</li> </ul> <p>Usage</p> <pre><code>{% do add_active_path(path('app_news_index')) %}\n\n&lt;a\n    href=\"{{ path('app_news_index') }}\"\n    class=\"{{ is_active_path(path('app_news_index')) ? 'active' : '' }}\"\n&gt;\n    News list\n&lt;/a&gt;\n</code></pre>"},{"location":"navigation_helper/#breadcrumbs","title":"Breadcrumbs","text":"<p>Easily build breadcrumbs. 3 functions are provided:</p> <ul> <li><code>append_breadcrumb</code>: append one breadcrumb to the list, given a path and a label</li> <li><code>prepend_breadcrumb</code>: same as <code>append_breadcrumb</code>, but simply prepends it instead of appending it</li> <li><code>get_breadcrumbs</code>: get an array of previously set breadcrumbs</li> </ul> <p>Usage</p> <pre><code>{% do append_breadcrumbs(path('app_news_index'), 'News list') %}\n{% do prepend_breadcrumbs(path('app_default_index'), 'ACME Website') %}\n\n{% for breadcrumb in get_breadcrumbs() %}\n    {# Index 0 is the path, index 1 is the label #}\n    &lt;a href=\"{{ breadcrumb[0] }}\"&gt;{{ breadcrumb[1] }}&lt;/a&gt;\n{% endfor %}\n</code></pre>"},{"location":"paginator/","title":"Paginator","text":"<p>The Paginator will help you iterate and paginate items.</p> <p>It is provided in two versions: <code>ArrayPaginator</code> and <code>DoctrineORMPaginator</code>, available under the <code>Leapt\\CoreBundle\\Paginator</code> namespace. The docs will explain how to use the Doctrine ORM one, but it is easy to apply for the ArrayPaginator as well.</p> <p> Example of Bootstrap 5 paginator</p>"},{"location":"paginator/#usage","title":"Usage","text":"<pre><code>use Leapt\\CoreBundle\\Paginator\\DoctrineORMPaginator;\n\n// Get your QueryBuilder from some repository\n$queryBuilder = $this-&gt;newsRepository-&gt;getActiveQueryBuilder();\n$currentPage = $request-&gt;query-&gt;get('page', 1);\n\n$paginator = new DoctrineORMPaginator($queryBuilder-&gt;getQuery());\n$paginator\n    -&gt;setLimitPerPage(10)\n    -&gt;setRangeLimit(10)\n    -&gt;setPage($currentPage);\n\n// Use it directly or pass it to Twig Template\n// Direct iteration is possible as it is Traversable\nforeach ($paginator as $news) {\n    // ...\n}\n</code></pre>"},{"location":"paginator/#twig-usage","title":"Twig usage","text":"<p>As you can do it using PHP, you can also iterate on the Paginator to use/render items.</p> <p>The <code>paginator_widget</code> function will render the pagination, if there are more than one page available.</p> <pre><code>{% if paginator|length &gt; 0 %}\n    {% for news in paginator %}\n        {{ include('news/_item.html.twig') }}\n    {% endfor %}\n\n    {{ paginator_widget(paginator) }}\n{% else %}\n    &lt;p&gt;There are no news available.&lt;/p&gt;\n{% endif %}\n</code></pre>"},{"location":"paginator/#twig-pagination","title":"Twig Pagination","text":"<p>Three pagination templates are provided by the bundle (but you can of course create your own):</p> <ul> <li><code>@LeaptCore/Paginator/paginator_default_layout.html.twig</code> (default)</li> <li><code>@LeaptCore/Paginator/paginator_bootstrap3_layout.html.twig</code></li> <li><code>@LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig</code></li> <li><code>@LeaptCore/Paginator/paginator_bootstrap5_layout.html.twig</code></li> </ul> <p>You can override the pagination template locally (like you would do for form themes):</p> <pre><code>{% paginator_theme paginator '@LeaptCore/Paginator/paginator_bootstrap5_layout.html.twig' %}\n</code></pre> <p>Or globally, in the configuration:</p> <pre><code># config/packages/leapt_core.yaml\nleapt_core:\n    paginator:\n        template: '@LeaptCore/Paginator/paginator_bootstrap5_layout.html.twig'\n</code></pre>"},{"location":"rss_feeds/","title":"RSS Feeds","text":"<p>The Feed Helper allows you to easily create RSS Feeds in minutes.</p>"},{"location":"rss_feeds/#enable-routing","title":"Enable routing","text":"<p>Create/update the <code>config/routes/leapt_core.yaml</code> file, add the following:</p> <pre><code>leapt_core_feed:\n    resource: '@LeaptCoreBundle/config/routing_feed.php'\n    prefix: /feed\n</code></pre>"},{"location":"rss_feeds/#create-the-service","title":"Create the service","text":"<p>Then create a file that implements <code>Leapt\\CoreBundle\\Feed\\FeedInterface</code>:</p> <pre><code>// src/Feed/ArticleFeed.php\n\nnamespace App\\Feed;\n\nuse App\\Repository\\ArticleRepository;\nuse Leapt\\CoreBundle\\Feed\\FeedInterface;\nuse Leapt\\CoreBundle\\Feed\\FeedItem;\nuse Symfony\\Component\\Routing\\RouterInterface;\n\nfinal class ArticleFeed implements FeedInterface\n{\n    public function __construct(\n        private ArticleRepository $articleRepository,\n        private RouterInterface $router,\n    ) {\n    }\n\n    public function getId(): string\n    {\n        return $this-&gt;router-&gt;generate('app_base_index', [], RouterInterface::ABSOLUTE_URL);\n    }\n\n    public function getLink(): string\n    {\n        return $this-&gt;router-&gt;generate('app_base_index', [], RouterInterface::ABSOLUTE_URL);\n    }\n\n    public function getTitle(): string\n    {\n        return 'ACME website';\n    }\n\n    public function getDescription(): string\n    {\n        return 'ACME Description';\n    }\n\n    public function getUpdatedAt(): \\DateTime\n    {\n        $items = $this-&gt;getItems();\n\n        return isset($items[0]) ? $items[0]-&gt;getPublicationDate() : new \\DateTime();\n    }\n\n    public function getItems(): iterable\n    {\n        return $this-&gt;articleRepository-&gt;findLatest(30);\n    }\n\n    public function buildItem($item): FeedItem\n    {\n        $uri = $this-&gt;router-&gt;generate('app_article_view', [\n            'slug' =&gt; $item-&gt;getSlug(),\n        ], RouterInterface::ABSOLUTE_URL);\n\n        $feedItem = new FeedItem();\n        $feedItem-&gt;id = $uri;\n        $feedItem-&gt;title = $item-&gt;getName();\n        $feedItem-&gt;description = $item-&gt;getContent();\n        $feedItem-&gt;createdAt = $item-&gt;getPublicationDate();\n        $feedItem-&gt;updatedAt = $item-&gt;getLastUpdate();\n        $feedItem-&gt;link = $uri;\n        $feedItem-&gt;author = ['name' =&gt; $item-&gt;getAuthor(), 'email' =&gt; 'acme@website.com'];\n\n        return $feedItem;\n    }\n}\n</code></pre>"},{"location":"rss_feeds/#register-the-service","title":"Register the service","text":"<p>Finally, all you need is to populate your <code>services.yaml</code> file with one or more Feed services like this:</p> <pre><code>services:\n    # Feeds\n    App\\Feed\\ArticleFeed:\n        tags:\n            - { name: leapt_core.feed, alias: article }\n</code></pre> <p>Now, your feed will be available at:</p> <ul> <li>http://yourhost/feed/article for RSS format</li> <li>http://yourhost/feed/article.atom for Atom format</li> </ul> <p>And using Twig:</p> <pre><code>&lt;link rel=\"alternate\" type=\"application/rss+xml\" href=\"{{ path('leapt_core_feed', { 'feedName': 'article', '_format': 'rss' }) }}\"&gt;\n&lt;link rel=\"alternate\" type=\"application/atom+xml\" href=\"{{ path('leapt_core_feed', { 'feedName': 'article', '_format': 'atom' }) }}\"&gt;\n</code></pre>"},{"location":"sitemaps/","title":"Sitemaps","text":""},{"location":"sitemaps/#enable-routing","title":"Enable routing","text":"<p>Create/update the <code>config/routes/leapt_core.yaml</code> file, add the following:</p> <pre><code>leapt_core_sitemap:\n    resource: '@LeaptCoreBundle/config/routing_sitemap.php'\n</code></pre>"},{"location":"sitemaps/#create-the-service","title":"Create the service","text":"<p>Then create a file that extends <code>Leapt\\CoreBundle\\Sitemap\\AbstractSitemap</code>:</p> <pre><code>// src/Sitemap/Sitemap.php\n\nnamespace App\\Sitemap;\n\nuse App\\Entity\\Page;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Leapt\\CoreBundle\\Sitemap\\AbstractSitemap;\nuse Symfony\\Component\\Routing\\RouterInterface;\n\nfinal class Sitemap extends AbstractSitemap\n{\n    public function __construct(\n        private EntityManagerInterface $em,\n        private string $locale,\n    ) {\n    }\n\n    public function build(RouterInterface $router): void\n    {\n        // Homepage\n        $this-&gt;addUrl($router-&gt;generate('app_default_index', ['_locale' =&gt; $this-&gt;locale], RouterInterface::ABSOLUTE_URL));\n\n        // Pages\n        $pages = $this-&gt;em-&gt;getRepository(Page::class)-&gt;findAllPublished($this-&gt;locale);\n        foreach ($pages as $page) {\n            $pageSlug = $page-&gt;getTranslations()-&gt;get($this-&gt;locale)-&gt;getSlug();\n            $loc = $router-&gt;generate('app_page_view', ['slug' =&gt; $pageSlug, '_locale' =&gt; $this-&gt;locale], RouterInterface::ABSOLUTE_URL);\n            $this-&gt;addUrl($loc, null, self::CHANGEFREQ_MONTHLY);\n        }\n    }\n}\n</code></pre>"},{"location":"sitemaps/#register-the-service","title":"Register the service","text":"<p>Finally all you need is to populate your <code>services.yaml</code> file with one or more Sitemap services like this:</p> <pre><code>services:\n    # Sitemaps\n    app.sitemap.fr:\n        class: App\\Sitemap\\Sitemap\n        arguments: [ '@doctrine.orm.entity_manager', 'fr' ]\n        tags:\n            - { name: leapt_core.sitemap, alias: fr }\n    app.sitemap.en:\n        class: App\\Sitemap\\Sitemap\n        arguments: [ '@doctrine.orm.entity_manager', 'en' ]\n        tags:\n            - { name: leapt_core.sitemap, alias: en }\n</code></pre> <p>Now, your main sitemap is available at <code>http://yourhost/sitemap.xml</code>.</p> <p>If you defined several with aliases then the main sitemap will list all of them, and according the example you would get:</p> <ul> <li>sitemap.xml</li> <li>sitemap_fr.xml</li> <li>sitemap_en.xml</li> </ul>"},{"location":"twig_extensions/","title":"Twig Extensions","text":""},{"location":"twig_extensions/#date-extension","title":"Date extension","text":""},{"location":"twig_extensions/#time_ago-filter","title":"<code>time_ago</code> filter","text":"<p>This filter allows you to display relative text to a given date (Datetime or string). It will use the current locale by default, but you can force another locale as parameter.</p> <pre><code>{{ some_datetime_object|time_ago }} {# eg. \"3 days ago\" #}\n{{ '2021-12-12'|time_ago('fr') }} {# eg. \"Il y a 5 minutes\" #}\n</code></pre>"},{"location":"twig_extensions/#gravatar-extension","title":"Gravatar extension","text":""},{"location":"twig_extensions/#gravatar-filter","title":"<code>gravatar</code> filter","text":"<p>Get either a Gravatar URL or complete image tag for a specified email address.</p> <pre><code>{{ 'contact@email.com'|gravatar }} {# will output an image HTML tag with the Gravatar related to the given email address #}\n</code></pre>"},{"location":"twig_extensions/#qrcode-extension","title":"QrCode extension","text":"<p>Info</p> <p>The QrCode extension was introduced in 4.4.</p>"},{"location":"twig_extensions/#get_qr_code_from_string-function","title":"<code>get_qr_code_from_string</code> function","text":"<p>Retrieve a QR code base64 string from a given string to be able to render it.</p> <p>It requires you to have the <code>endroid/qr-code</code> package installed in your application. If it is not installed, a clear error message should be displayed when using the function.</p> <p>Usage</p> <pre><code>&lt;img src=\"{{ get_qr_code_from_string('My text to include in the QR code') }}\" alt=\"QR code\"&gt;\n</code></pre> Arguments Name Description Required Default value qrCodeContent Text to encode in the QR code. Yes N/A size Image size. No 200 margin The margin to apply in the image. No 0"},{"location":"twig_extensions/#site-extension","title":"Site extension","text":""},{"location":"twig_extensions/#page-title-helper","title":"Page title helper","text":"<p>There are three functions available that help build a page title:</p> <ul> <li><code>prepend_page_title('text to prepend')</code></li> <li><code>append_page_title('text to append')</code></li> <li><code>page_title('Base title', separator = ' - ')</code></li> </ul> <p>Usage</p> <pre><code>{% do prepend_page_title('Demo') %}\n{% do append_page_title('Dashboard') %}\n{% do append_page_title('Home') %}\n\n&lt;head&gt;\n    {# Would render \"Demo - ACME Website - Dashboard - Home\" #}\n    &lt;title&gt;{{ page_title('ACME Website') }}&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"twig_extensions/#meta-description-helper","title":"Meta description helper","text":"<p>There are two functions available to generate the meta description:</p> <ul> <li><code>set_meta_description('text')</code></li> <li><code>meta_description('default description')</code></li> </ul> <p>Usage</p> <pre><code>{% do set_meta_description('Basic description') %}\n\n&lt;head&gt;\n    {# Would render \"Basic description\" as it's defined before, \"Default description\" is `set_meta_description` was not called earlier #}\n    &lt;meta name=\"description\" content=\"{{ meta_description('Default description') }}\"&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"twig_extensions/#meta-keywords-helper","title":"Meta keywords helper","text":"<p>There are two functions available helping you build meta keywords:</p> <ul> <li><code>add_meta_keywords(['array', 'of', 'keywords'])</code></li> <li><code>meta_keywords(['default', 'keywords'])</code></li> </ul> <p>It will trim &amp; display unique keywords only.</p> <p>Usage</p> <pre><code>{% do add_meta_keywords(['some', 'keywords']) %}\n{% do add_meta_keywords(['other', 'keywords']) %}\n\n&lt;head&gt;\n    {# Would render \"default,keywords,some,other\" #}\n    &lt;meta name=\"keywords\" content=\"{{ meta_keywords(['default', 'keywords']) }}\"&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"twig_extensions/#false-test","title":"<code>false</code> test","text":"<p>A simple test to assert if a variable is <code>false</code>.</p> <p>Usage</p> <pre><code>{% if myVar is false %}\n</code></pre>"},{"location":"twig_extensions/#text-extension","title":"Text extension","text":""},{"location":"twig_extensions/#camelize-filter","title":"<code>camelize</code> filter","text":"<pre><code>{{ 'Some.text.is.now.camelized.'|camelize }} {# will output \"Some_Text_Is_Now_Camelized.\" #}\n</code></pre>"},{"location":"twig_extensions/#safe_truncate-filter","title":"<code>safe_truncate</code> filter","text":"<p>Returns truncated text without breaking HTML tags.</p> <p>Parameters:</p> <ul> <li><code>length</code> (int, default <code>30</code>)</li> <li><code>preserve</code> (bool, default <code>true</code>) to preserve full words</li> <li><code>separator</code> (string, default <code>...</code>)</li> </ul> <pre><code>{{ 'Lorem &lt;strong class=\"super\" style=\"display: none;\"&gt;ipsum dolor sit&lt;/strong&gt; amet'|safe_truncate(16) }}\n{# will output \"Lorem &lt;strong class=\"super\" style=\"display: none;\"&gt;ipsum...&lt;/strong&gt;\" #}\n</code></pre>"},{"location":"twig_extensions/#more-extensions","title":"More extensions","text":"<ul> <li>Data lists</li> <li>Navigation helper</li> <li>Paginator</li> </ul> <p>More filters &amp; functions exist but are not documented yet. You can find them in the following files:</p> <ul> <li>FacebookExtension</li> <li>GoogleExtension</li> </ul> <p>PRs welcome :)</p>"},{"location":"utilities/","title":"Utilities","text":""},{"location":"utilities/#passwordstrengthchecker","title":"PasswordStrengthChecker","text":"<p>This class has only one method: <code>getStrength</code>, and returns the strength of a given password (between 0 and 100,  100 being the best value).</p> <p>If the second argument - <code>$username</code> - is provided, the method will remove the username from the password  if it contains it.</p> <p>See also the PasswordStrength constraint.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Util\\PasswordStrengthChecker;\n\n$passwordStrengthChecker = new PasswordStrengthChecker();\n$score = $passwordStrengthChecker-&gt;getStrength($password, $username);\n</code></pre>"},{"location":"utilities/#stringutil","title":"StringUtil","text":"<p>The StringUtil has 4 public &amp; static methods, their names speak for themselves:</p> <ul> <li><code>camelize</code></li> <li><code>underscore</code></li> <li><code>unaccent</code></li> <li><code>slugify</code></li> </ul> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Util\\StringUtil;\n\n$name = 'Caf\u00e9 means coffee';\n$withoutAccents = StringUtil::unaccent($name); // Cafe means coffee\n$slug = StringUtil::slugify($name); // cafe-means-coffee\n</code></pre>"},{"location":"validators/","title":"Validator Constraints","text":""},{"location":"validators/#passwordstrength","title":"PasswordStrength","text":"<p>The PasswordStrengthChecker is based on a snipped provided in Symfony 1.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert;\n\n#[LeaptAssert\\PasswordStrength(min: 6, max: 72, score: 80')]\npublic string $plainPassword;\n</code></pre> Options Name Description Default value min Minimum length for the password. null max Maximum length for the password. null score Required strength to pass validation, between 0 and 100. 50 minMessage Message shown if the password is too short. This password is too short. It should have {{ limit }} characters or more. maxMessage Message shown if the password is too long. This password is too long. It should have {{ limit }} characters or less. scoreMessage Message shown if the password is not strong enough. This password is not strong enough."},{"location":"validators/#recaptcha","title":"Recaptcha","text":"<p>This validator should be used with the Recaptcha Type, and is based on the EWZRecaptchaBundle.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert;\n\n#[LeaptAssert\\Recaptcha(message: 'Invalid captcha.')]\npublic $recaptcha;\n</code></pre> Options Name Description Default value message Message shown if the captcha is not valid. This value is not a valid captcha. invalidHostMessage Message shown if the host is not valid. The captcha was not resolved on the right domain. <p>See also RecaptchaType.</p>"},{"location":"validators/#recaptchav3","title":"RecaptchaV3","text":"<p>This validator should be used with the RecaptchaV3 Type, and is based on the EWZRecaptchaBundle.</p> <p>It requires you to have the <code>google/recaptcha</code> package installed in your application. If it is not installed, a clear error message should be displayed in debug mode when validating.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert;\n\n#[LeaptAssert\\RecaptchaV3(message: 'Invalid captcha.')]\npublic $recaptcha;\n</code></pre> Options Name Description Default value message Message shown if the captcha is not valid. The submitted captcha is invalid. invalidHostMessage Message shown if the host is not valid. The captcha was not resolved on the right domain. <p>See also RecaptchaType.</p>"},{"location":"validators/#slug","title":"Slug","text":"<p>Helps to validate that the provided value matches a valid slug format.</p> <p>Usage</p> <pre><code>use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert;\n\n#[LeaptAssert\\Slug]\npublic string $slug;\n</code></pre> Options Name Description Default value message Message shown if the slug is not valid. A slug can only contain lowercase letters, numbers and hyphens. pattern Pattern used to check the slug format. <code>/^([a-z0-9-]+)$/</code>"},{"location":"data_lists/custom_data_list/","title":"Data list - Create a custom Datalist class","text":"<pre><code>namespace App\\Controller;\n\nuse App\\Datalist\\Type\\NewsDatalistType;\nuse App\\Repository\\NewsRepository;\nuse Leapt\\CoreBundle\\Datalist\\DatalistFactory;\nuse Leapt\\CoreBundle\\Datalist\\Datasource\\DoctrineORMDatasource;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfinal class NewsController extends AbstractController\n{\n    public function __construct(\n        private DatalistFactory $datalistFactory,\n        private NewsRepository $newsRepository,\n    ) {\n    }\n\n    public function index(Request $request): Response\n    {\n        $queryBuilder = $this-&gt;newsRepository-&gt;createQueryBuilder('e')\n            -&gt;orderBy('e.publicationDate', 'DESC');\n\n        $datalist = $this-&gt;datalistFactory\n            -&gt;createBuilder(NewsDatalistType::class)\n            -&gt;getDatalist();\n\n        $datalist-&gt;setRoute($request-&gt;attributes-&gt;get('_route'))\n            -&gt;setRouteParams($request-&gt;query-&gt;all());\n        $datasource = new DoctrineORMDatasource($queryBuilder);\n        $datalist-&gt;setDatasource($datasource);\n        $datalist-&gt;bind($request);\n\n        return $this-&gt;render('news/index.html.twig', [\n            'datalist' =&gt; $datalist,\n        ]);\n    }\n}\n</code></pre> <pre><code>namespace App\\Datalist\\Type;\n\nuse App\\Entity\\News;\nuse Leapt\\CoreBundle\\Datalist\\Action\\Type\\SimpleActionType;\nuse Leapt\\CoreBundle\\Datalist\\DatalistBuilder;\nuse Leapt\\CoreBundle\\Datalist\\Field\\Type\\DateTimeFieldType;\nuse Leapt\\CoreBundle\\Datalist\\Field\\Type\\TextFieldType;\nuse Leapt\\CoreBundle\\Datalist\\Filter\\Type\\SearchFilterType;\nuse Leapt\\CoreBundle\\Datalist\\Type\\DatalistType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nfinal class NewsDatalistType extends DatalistType\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        parent::configureOptions($resolver);\n\n        $resolver\n            -&gt;setDefaults([\n                'limit_per_page' =&gt; 10,\n                'data_class'     =&gt; News::class,\n            ])\n        ;\n    }\n\n    public function buildDatalist(DatalistBuilder $builder, array $options): void\n    {\n        $builder\n            -&gt;addField('title', TextFieldType::class, [\n                'label' =&gt; 'news.title',\n            ])\n            -&gt;addField('publicationDate', DateTimeFieldType::class, [\n                'label'  =&gt; 'news.publication_date',\n                'format' =&gt; 'Y/m/d',\n            ])\n            -&gt;addFilter('title', SearchFilterType::class, [\n                'label'         =&gt; 'news.title',\n                'search_fields' =&gt; ['e.title'],\n            ])\n            -&gt;addAction('update', SimpleActionType::class, [\n                'route'  =&gt; 'app_news_update',\n                'label'  =&gt; 'content.index.update',\n                'params' =&gt; ['id' =&gt; 'id'],\n            ])\n        ;\n    }\n}\n</code></pre> <p>Go back to Data lists documentation</p>"},{"location":"data_lists/field/label_field/","title":"Data lists: Label field","text":"<p>Example</p> <pre><code>$builder\n    // Example with strings\n    -&gt;addField('visibility', LabelFieldType::class, [\n        'mappings' =&gt; [\n             'everyone' =&gt; [\n                'label' =&gt; 'Everyone',\n                'attr' =&gt; ['class' =&gt; 'badge bg-success'],\n            ],\n            'author' =&gt; [\n                'label' =&gt; 'Author',\n                'attr' =&gt; ['class' =&gt; 'badge bg-warning'],\n            ],\n            'admin' =&gt; [\n                'label' =&gt; 'Admin',\n                'attr' =&gt; ['class' =&gt; 'badge bg-danger'],\n            ],\n         ],\n    ])\n    // Example with BackedEnum\n    -&gt;addField('status', LabelFieldType::class, [\n        'mappings' =&gt; [\n            Status::Draft-&gt;value =&gt; [\n                'label' =&gt; 'Draft publication',\n                'attr' =&gt; ['class' =&gt; 'badge bg-warning'],\n            ],\n            Status::Published-&gt;value =&gt; [\n                'label' =&gt; 'Published',\n                'attr' =&gt; ['class' =&gt; 'badge bg-success'],\n            ],\n        ],\n    ])\n    -&gt;getDatalist();\n</code></pre> <p>As shown above, you can either use scalars or BackedEnums.</p> <p>Options</p> <p>Mandatory options:</p> <ul> <li><code>mappings</code>: Array that is used to map the value of the field with the displayed value (must be string). The <code>attr</code> key is an option of the mappings where you can define e.g. the HTML class attribute.</li> </ul> <p>Go back to Data lists documentation</p>"}]}